[
    {
        "question": "Write a Python function to reverse a string",
        "answer": {
            "Python": "def reverse_string(s):\n    return s[::-1]"
        }
    },
    {
        "question": "Write a Python function to check if a number is prime",
        "answer": {
            "Python": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
        }
    },
    {
        "question": "Write a Python function to find the factorial of a number",
        "answer": {
            "Python": "def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)"
        }
    },
    {
        "question": "Write a Python function to compute the nth Fibonacci number",
        "answer": {
            "Python": "def fibonacci(n):\n    return n if n <= 1 else fibonacci(n-1) + fibonacci(n-2)"
        }
    },
    {
        "question": "Write a Python function to find the greatest common divisor (GCD) of two numbers",
        "answer": {
            "Python": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
        }
    },
    {
        "question": "Write a Python function to sort an array using bubble sort",
        "answer": {
            "Python": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]"
        }
    },
    {
        "question": "Write a Python function to perform binary search on a sorted array",
        "answer": {
            "Python": "def binary_search(arr, x):\n    l, r = 0, len(arr) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1"
        }
    },
    {
        "question": "Write a Python function to merge two sorted arrays",
        "answer": {
            "Python": "def merge(arr1, arr2):\n    merged_array = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_array.append(arr1[i])\n            i += 1\n        else:\n            merged_array.append(arr2[j])\n            j += 1\n    merged_array.extend(arr1[i:])\n    merged_array.extend(arr2[j:])\n    return merged_array"
        }
    },
    {
        "question": "Write a Python function to find the maximum element in an array",
        "answer": {
            "Python": "def find_max(arr):\n    return max(arr)"
        }
    },
    {
        "question": "Write a Python function to count the number of vowels in a string",
        "answer": {
            "Python": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')"
        }
    },

    {
        "question": "Write a Python class to represent a singly linked list and implement methods to add a node at the beginning, end, and at a given position, and to delete a node from a given position.",
        "answer": {
            "Python": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def add_at_position(self, data, position):\n        if position == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        for i in range(position - 1):\n            if current is None:\n                raise Exception('Position out of bounds')\n            current = current.next\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_at_position(self, position):\n        if self.head is None:\n            return\n        temp = self.head\n        if position == 0:\n            self.head = temp.next\n            temp = None\n            return\n        for i in range(position - 1):\n            temp = temp.next\n            if temp is None:\n                break\n        if temp is None:\n            return\n        if temp.next is None:\n            return\n        next_node = temp.next.next\n        temp.next = None\n        temp.next = next_node\n\n# Example usage:\n\n# Create a linked list\nllist = LinkedList()\n\n# Add nodes\nllist.add_at_end(1)\nllist.add_at_end(2)\nllist.add_at_end(3)\nllist.add_at_end(4)\n\n# Print the linked list\ncurrent = llist.head\nwhile current:\n    print(current.data)\n    current = current.next\n"
        }
    },
    
        {
            "question": "Write a Java method to reverse a string",
            "answer": {
                "Java": "public static String reverseString(String str) {\n    return new StringBuilder(str).reverse().toString();\n}"
            }
        },
        {
            "question": "Write a Java method to check if a number is prime",
            "answer": {
                "Java": "public static boolean isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}"
            }
        },
        {
            "question": "Write a C function to find the factorial of a number",
            "answer": {
                "C": "int factorial(int n) {\n    return (n == 0) ? 1 : n * factorial(n - 1);\n}"
            }
        },
        {
            "question": "Write a C function to compute the nth Fibonacci number",
            "answer": {
                "C": "int fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}"
            }
        }
    
    
    
]
